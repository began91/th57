{"version":3,"sources":["components/Form.js","App.js","serviceWorker.js","index.js"],"names":["InputItem","props","state","value","handleChange","bind","e","this","setState","target","className","id","htmlFor","label","type","name","onChange","React","Component","Instructor","weight","vest","handleNameChange","handleVestChange","handleWeightChange","vestDelta","Number","checked","Student","Aircraft","side","aircraft","spot","handleSpotChange","handleSideChange","Form","eventName","curwx","fcst","instructorName","instructorVest","instructorWt","studName","studWt","mxTmp","pa","da","date","Date","toDateString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c301284.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Form.css';\r\n\r\n\r\nclass InputItem extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {value: this.props.value};\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n\r\n    handleChange(e) {\r\n        this.setState({value: e.target.value});\r\n        //Event, wx, and date have no effect on calculations\r\n        //need separate handling if change is made to DA.\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className={this.props.id}>\r\n                <label htmlFor={this.props.id}>{this.props.label}:</label>\r\n                <input type=\"text\" id={this.props.id} name={this.props.id} value={this.state.value} onChange={this.handleChange}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Instructor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n            name: this.props.name,\r\n            weight: this.props.weight,\r\n            vest: this.props.vest\r\n        }\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleVestChange = this.handleVestChange.bind(this);\r\n        this.handleWeightChange = this.handleWeightChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState({name: e.target.value});\r\n    }\r\n\r\n    handleVestChange(e) {\r\n        let vestDelta;\r\n        if (e.target.value === 'wet') {\r\n            vestDelta = 8;\r\n        } else {\r\n            vestDelta = -8;\r\n        }\r\n        this.setState({\r\n            vest: e.target.value,\r\n            weight: Number(this.state.weight)+vestDelta\r\n        });\r\n    }\r\n\r\n    handleWeightChange(e) {\r\n        this.setState({weight: Number(e.target.value)});\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"instructor\">\r\n                <div className=\"instructor-name\">\r\n                    <label htmlFor=\"instructor\">Instructor:</label>\r\n                    <input type=\"text\" id=\"instructor\" name=\"instructor\" value={this.state.name} onChange={this.handleNameChange} />\r\n                </div>\r\n                <div className=\"vest\">\r\n                    <label htmlFor=\"dry\">\r\n                        <input type=\"radio\" id=\"dry\" name=\"vest\" value=\"dry\" checked={this.state.vest==='dry'} onChange={this.handleVestChange} />\r\n                        Dry\r\n                    </label>\r\n                    <label htmlFor=\"wet\">\r\n                        <input type=\"radio\" id=\"wet\" name=\"vest\" value=\"wet\" checked={this.state.vest==='wet'} onChange={this.handleVestChange}/>\r\n                        Wet\r\n                    </label>\r\n\r\n                    <label htmlFor=\"instructorWeight\">Weight:</label>\r\n                    <input type=\"number\" id=\"instructorWeight\" name=\"instructorWeight\" value={this.state.weight} onChange={this.handleWeightChange} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Student extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: this.props.name,\r\n            weight: this.props.weight\r\n        }\r\n\r\n        this.handleWeightChange = this.handleWeightChange.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleWeightChange(e) {\r\n        this.setState({weight: Number(e.target.value)});\r\n    }\r\n\r\n    handleNameChange(e) {\r\n        this.setState({name: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"student\">\r\n                <div className=\"student-name\">\r\n                    <label htmlFor=\"studentName\">Student:</label>\r\n                    <input type=\"text\" id=\"studentName\" name=\"studentName\" value={this.state.name} onChange={this.handleNameChange} />\r\n                </div>\r\n                <div className=\"student-weight\">\r\n                <label htmlFor=\"studentWeight\">Weight:</label>\r\n                    <input type=\"number\" id=\"studentWeight\" name=\"studentWeight\" value={this.state.weight} onChange={this.handleWeightChange} /> \r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Aircraft extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            side: props.aircraft,\r\n            spot: props.spot\r\n        }\r\n\r\n        this.handleSpotChange = this.handleSpotChange.bind(this);\r\n        this.handleSideChange = this.handleSideChange.bind(this);\r\n    }\r\n\r\n    handleSpotChange(e) {\r\n        this.setState({spot: e.target.value});\r\n    }\r\n\r\n    handleSideChange(e) {\r\n        this.setState({side: e.target.value});\r\n        //lookup aircraft number for weight and moment\r\n        //if no side number given, calculate heaviest/most fwd\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"aircraft\">\r\n                <label htmlFor=\"side\">Aircraft:</label>\r\n                <input type=\"text\" id=\"side\" name=\"side\" value={this.state.side} onChange={this.handleSideChange} />\r\n                <label htmlFor=\"spot\">Spot:</label>\r\n                <input type=\"text\" id=\"spot\" name=\"spot\" value={this.state.spot} onChange={this.handleSpotChange} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n/*\r\nlet eventName=\"C4001\";\r\nlet aircraft=\"123\";\r\nlet spot=\"H/S\";\r\nlet curwx=\"BKN008\";\r\nlet fcst=\"SKC\";\r\nlet studName=\"I.M. Stud\";\r\nlet studWt=195;\r\nlet mxTmp=31;\r\nlet pa=124;\r\nlet da=1689;\r\n*/\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            eventName: 'C4001',\r\n            aircraft: '123',\r\n            spot: 'H/S',\r\n            curwx: 'BKN008',\r\n            fcst: 'SKC',\r\n            instructorName: 'Egan',\r\n            instructorVest: 'dry',\r\n            instructorWt: 210,\r\n            studName: 'I. M. Stud',\r\n            studWt: 195,\r\n            mxTmp: 31,\r\n            pa: 124,\r\n            da: 1689,\r\n            date: new Date().toDateString()\r\n        }\r\n    }\r\n    \r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"form\">\r\n                <div className=\"left-header header\">\r\n                    <InputItem label=\"Event\" value={this.state.eventName} id=\"fltEvent\"/>\r\n                    <Instructor name={this.state.instructorName} vest={this.state.instructorVest} \r\n                    weight={this.state.instructorWt} />\r\n                    <Aircraft aircraft={this.state.aircraft} spot={this.state.spot}/>\r\n                    <InputItem label=\"Current Wx\" value={this.state.curwx} id=\"curwx\"/>\r\n                    <InputItem label=\"Forecast Wx\" value={this.state.fcst} id=\"fcst\"/>\r\n                </div>\r\n                <div className=\"right-header header\">\r\n                    <InputItem label=\"Date\" value={this.state.date} id=\"date\"/>\r\n                    <Student name={this.state.studName} weight={this.state.studWt} />\r\n                    <InputItem label=\"Max Temp\" value={this.state.mxTmp} id=\"mxTmp\" />\r\n                    <InputItem label=\"Max PA\" value={this.state.pa} id=\"pa\"/>\r\n                    <InputItem label=\"Max DA\" value={this.state.da} id=\"da\"/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;\r\n/*\r\nResults >>>\r\n<div className=\"operating\">\r\n                    <div className=\"fields\">\r\n\r\n                    </div>\r\n                    <div className=\"heaviest\">\r\n\r\n                    </div>\r\n                    <div className=\"fwd-actual\">\r\n\r\n                    </div>\r\n                    <div className=\"moment\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"takeoff\">\r\n                    <div className=\"fields\">\r\n\r\n                    </div>\r\n                    <div className=\"heaviest\">\r\n\r\n                    </div>\r\n                    <div className=\"fwd-actual\">\r\n\r\n                    </div>\r\n                    <div className=\"moment\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"external\">\r\n                    <div className=\"fields\">\r\n\r\n                    </div>\r\n                    <div className=\"heaviest\">\r\n\r\n                    </div>\r\n                    <div className=\"fwd-actual\">\r\n\r\n                    </div>\r\n                    <div className=\"moment\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"landing\">\r\n                    <div className=\"fields\">\r\n\r\n                    </div>\r\n                    <div className=\"heaviest\">\r\n\r\n                    </div>\r\n                    <div className=\"fwd-actual\">\r\n\r\n                    </div>\r\n                    <div className=\"moment\">\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"checks\">\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n<Event id={eventName} />\r\n                    <Instructor name=\"Egan\" vest=\"Dry\" weight=\"210\"/>\r\n                    <Aircraft side=\"123\" spot=\"A1\" />\r\n                    <Weather current=\"curwx\" forecast=\"fcst\" />\r\n                </div>\r\n                <div className=\"right-header\">\r\n                    <Date date={new Date().toDateString()} />\r\n                    <Student name=\"I.M. Stud\" weight=\"210\" />\r\n                    <Temp temp=\"21C\" />\r\n                    <PA pa=\"+210\" />\r\n                    <DA da=\"+1545\" />\r\n\r\n\r\n\r\n${new Date().toDateString()}\r\n\r\ndiv className=\"form\">\r\n                <h4 className=\"event\">Event</h4>\r\n                <input className=\"event\">{this.props.event}</input>\r\n            </div>\r\n*/","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Form from './components/Form.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        TH-57 Weight and Balance\n      </header>\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}